<?php

/**
 * Global Application Router
 *
 * Routes requests to registered handler which then handles the rest of the
 * requests.
 *
 * @author Sam Jones <jonesy at cityvinyl.co.uk>
 * @since 0.0.1
 *
 * Copyright (C) 2018 Sam Jones
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

namespace Trypta\Liquid {

    /**
     * Global handler router
     *
     * Routes request to registered handler responsible
     *
     * @package Liquid Framework
     * @subpackage Core
     * @category Routing
     */
    class Router
    {
        use Traits\Singleton;

        /**
         * Holds a list of registered route handlers
         *
         * @static
         * @access private
         * @var array $_routes
         */
        private static $_routes = array();

        /**
         * Regsiters a route and associated route handler
         *
         * @static
         * @access public
         * @param string $route Regex string matched against URI
         * @param \Liquid\Core\RouteHandler $handler The route handler object
         */
        public static function registerRoute($route, $handler)
        {
            self::$_routes[$route] = $handler;
        }

        /**
         * Application Instance
         *
         * @access protected
         * @var \Liquid\Application $app
         */
        protected $app = null;

        /**
         * Current handler, determined by registered routes and current URI
         *
         * @access protected
         * @var \Liquid\Core\RouteHandler $handler
         */
        public $handler = null;

        /**
         * System Router Constructor
         *
         * @access public
         * @param \Liquid\Application $app Liquid Application Instance
         */
        public function __construct(\Liquid\Application $app)
        {
            $this->app = $app;
            $uri = $this->app->request->getServer('REQUEST_URI');

            foreach (self::$_routes as $route => $handler) {
                $regex = "/" . str_replace("/", "\/", $route) . "/i";
                $match = preg_match($regex, $uri);
                if ($match === 1) {
                    $this->handler = $handler;
                    $this->handler->initialise();
                    break;
                }
            }

            if (is_null($this->handler)) {
                throw new \RuntimeException('Cannot determine router: ' . $this->app->request->getServer('REQUEST_URI'));
            }
        }

        /**
         * Performs the actual request routing
         *
         * @access public
         */
        public function route()
        {
            $this->handler->route();
        }

        /**
         * Returns the response generated by the route handler
         *
         * @access public
         * @return \Liquid\Core\Response
         */
        public function getResponse()
        {
            return $this->handler->getResponse();
        }

        /**
         * Before database start hook
         *
         * Calls handlers beforeDatabaseStart method
         *
         * @access public
         */
        public function beforeDatabaseStart()
        {
            $this->handler->beforeDatabaseStart();
        }

        /**
         * Before session start hook
         *
         * Calls handlers beforeSessionStart method
         *
         * @access public
         */
        public function beforeSessionStart()
        {
            $this->handler->beforeSessionStart();
        }

        /**
         * Before routing start hook
         *
         * Calls handlers beforeRoutingStart method
         *
         * @access public
         */
        public function beforeRoutingStart()
        {
            $this->handler->beforeRoutingStart();
        }
    }

}
